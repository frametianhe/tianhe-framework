package com.tianhe.writtentest.algorithm.array;

import java.util.Arrays;

public class OnlyOnes {

    public static void main(String[] args) {

        /**
         * 只出现一次的数字
         * 给定一个非空整数数组，除了某个元素只出现一次之外，其余每个元素都出现2次，找出那个只出现一次的元素
         *
         * 示例 1:
         *
         * 输入: [2,2,1]
         * 输出: 1
         *
         * 示例 2:
         *
         * 输入: [4,1,2,1,2]
         * 输出: 4
         */
        int[] arr = {4,1,2,1,2};
        System.out.println(test01(arr));
    }

    /**
     * 位运算
     * 不考虑时间复杂度和空间复杂度的实现有几种
     * 1、使用集合存储数字，遍历数组中的每个数字，如果集合中没有改数字则将改数字加入集合，如果集合中已有数字，则将改数字从集合中删除，最后剩下
     * 的数字就是只出现一次的数字
     * 2、使用哈希表存储每个数字和数字出现的次数，遍历数组就可以得到数字出现的次数，并更新哈希表，最后遍历哈希表得到只出现一次的数字
     * 3、使用集合存储数组中出现的全部数字，并计算数组的元素之和，由于元素保证元素无重复，计算集合所有元素之和的2倍，每个元素出现2次的情况下的元素之和
     * 由于数组中只有一个元素出现一次，其余元素都出现2次，因此用集合中的元素之和的2倍减去数组中元素之和，剩下的数就是数组中只出现一次的数字
     * 以上3种方式都需要O(N)的空间，n是数组长度
     *
     * 线性时间复杂度和常数空间复杂度，使用位运算，异或运算
     * 1、任何数和0做异或运算，结果仍然是原来的数
     * 2、任何数和自身做异或运算，结果是0
     * 3、异或运算满足交换律和结合律
     * 数组中的全部元素的异或运算结果即为数组中只出现一次的数字
     * @param nums
     * @return
     */
    public static int test01(int[] nums){
        int single = 0;
        for (int num : nums){
            single ^= num;
        }
        return single;
    }
}
